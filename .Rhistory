#geom_smooth(method="lm",se=FALSE,color="Grey",lwd=1) +
geom_point(size=3) +
xlab("B cell proportion") +
ylab("CD19 expression") +
theme_classic() +
theme(legend.position = "none",
axis.title = element_text(size=15),
axis.text = element_text(size=15))
tmp_lm <- lm(CD19 ~ T_Cells,data=x)
x[["fitted"]] <- predict(object = tmp_lm,newdata=data.frame(T_Cells = x$T_Cells))
p_T <- ggplot(data = x,
mapping = aes(x = T_Cells,
y = CD19)) +
#geom_segment(aes(xend = T_Cells, yend = fitted, color = "resid"),lwd=1) +
#geom_smooth(method="lm",se=FALSE,color="Grey",lwd=1) +
geom_point(size=3) +
xlab("T cell proportion") +
ylab("CD19 expression") +
theme_classic() +
theme(legend.position = "none",
axis.title = element_text(size=15),
axis.text = element_text(size=15))
p_B | p_T
test_lm <- lm(CD19 ~ .,data = x)
summary(test_lm)
test_lm <- lm(CD19 ~ B_Cells+T_Cells,data = x)
summary(test_lm)
View(x)
test_lm <- lm(CD19 ~ 0+B_Cells+T_Cells,data = x)
summary(test_lm)
x <- def_df(n,poplist)
# Add genes
x <- add_gene(df = x,genename = "CD19",mean = c(10,1), var = c(0.5,0.5)) # B Cell expression
test_lm <- lm(CD19 ~ 0+B_Cells+T_Cells,data = x)
summary(test_lm)
tmp_lm <- lm(CD19 ~ B_Cells,data=x)
x[["fitted"]] <- predict(object = tmp_lm,newdata=data.frame(B_Cells = x$B_Cells))
p_B <- ggplot(data = x,
mapping = aes(x = B_Cells,
y = CD19)) +
#geom_segment(aes(xend = B_Cells, yend = fitted, color = "resid"),lwd=1) +
#geom_smooth(method="lm",se=FALSE,color="Grey",lwd=1) +
geom_point(size=3) +
xlab("B cell proportion") +
ylab("CD19 expression") +
theme_classic() +
theme(legend.position = "none",
axis.title = element_text(size=15),
axis.text = element_text(size=15))
tmp_lm <- lm(CD19 ~ T_Cells,data=x)
x[["fitted"]] <- predict(object = tmp_lm,newdata=data.frame(T_Cells = x$T_Cells))
p_T <- ggplot(data = x,
mapping = aes(x = T_Cells,
y = CD19)) +
#geom_segment(aes(xend = T_Cells, yend = fitted, color = "resid"),lwd=1) +
#geom_smooth(method="lm",se=FALSE,color="Grey",lwd=1) +
geom_point(size=3) +
xlab("T cell proportion") +
ylab("CD19 expression") +
theme_classic() +
theme(legend.position = "none",
axis.title = element_text(size=15),
axis.text = element_text(size=15))
p_B | p_T
# Add genes
x <- add_gene(df = x,genename = "CD19",mean = c(10,1), var = c(0.5,0.5)) # B Cell expression
# Plot previous data
###############################################
tmp_lm <- lm(CD19 ~ B_Cells,data=x)
x[["fitted"]] <- predict(object = tmp_lm,newdata=data.frame(B_Cells = x$B_Cells))
p_B <- ggplot(data = x,
mapping = aes(x = B_Cells,
y = CD19)) +
#geom_segment(aes(xend = B_Cells, yend = fitted, color = "resid"),lwd=1) +
#geom_smooth(method="lm",se=FALSE,color="Grey",lwd=1) +
geom_point(size=3) +
xlab("B cell proportion") +
ylab("CD19 expression") +
theme_classic() +
theme(legend.position = "none",
axis.title = element_text(size=15),
axis.text = element_text(size=15))
tmp_lm <- lm(CD19 ~ T_Cells,data=x)
x[["fitted"]] <- predict(object = tmp_lm,newdata=data.frame(T_Cells = x$T_Cells))
p_T <- ggplot(data = x,
mapping = aes(x = T_Cells,
y = CD19)) +
#geom_segment(aes(xend = T_Cells, yend = fitted, color = "resid"),lwd=1) +
#geom_smooth(method="lm",se=FALSE,color="Grey",lwd=1) +
geom_point(size=3) +
xlab("T cell proportion") +
ylab("CD19 expression") +
theme_classic() +
theme(legend.position = "none",
axis.title = element_text(size=15),
axis.text = element_text(size=15))
p_B | p_T
# Add genes
x <- add_gene(df = x,genename = "CD19",mean = c(10,1), var = c(1,1)) # B Cell expression
# Plot previous data
###############################################
tmp_lm <- lm(CD19 ~ B_Cells,data=x)
x[["fitted"]] <- predict(object = tmp_lm,newdata=data.frame(B_Cells = x$B_Cells))
p_B <- ggplot(data = x,
mapping = aes(x = B_Cells,
y = CD19)) +
#geom_segment(aes(xend = B_Cells, yend = fitted, color = "resid"),lwd=1) +
#geom_smooth(method="lm",se=FALSE,color="Grey",lwd=1) +
geom_point(size=3) +
xlab("B cell proportion") +
ylab("CD19 expression") +
theme_classic() +
theme(legend.position = "none",
axis.title = element_text(size=15),
axis.text = element_text(size=15))
tmp_lm <- lm(CD19 ~ T_Cells,data=x)
x[["fitted"]] <- predict(object = tmp_lm,newdata=data.frame(T_Cells = x$T_Cells))
p_T <- ggplot(data = x,
mapping = aes(x = T_Cells,
y = CD19)) +
#geom_segment(aes(xend = T_Cells, yend = fitted, color = "resid"),lwd=1) +
#geom_smooth(method="lm",se=FALSE,color="Grey",lwd=1) +
geom_point(size=3) +
xlab("T cell proportion") +
ylab("CD19 expression") +
theme_classic() +
theme(legend.position = "none",
axis.title = element_text(size=15),
axis.text = element_text(size=15))
p_B | p_T
test_lm <- lm(CD19 ~ 0+B_Cells+T_Cells,data = x)
summary(test_lm)
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("ggpubr") # p-values in comparison plots
library("ggfortify") # plotting PCA
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("ggpubr") # p-values in comparison plots
#library("ggfortify") # plotting PCA
#library("ggrepel")
library("xCell")
install.packages("xCell")
update
install.packages("installr")
library(installr)
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("ggpubr") # p-values in comparison plots
#library("ggfortify") # plotting PCA
#library("ggrepel")
#library("xCell")
library("limma")
#library("patchwork")
#library("GSVA")
#library("GSEABase")
#library("Seurat")
options(scipen = 999)
rm(list=ls())
# Reading file simulated with 20000 cells per sample, and 160 samples.
# Outputlist is the 'ground truth' that we are trying to model
# df_out is the sample data upon which the ground truth is modelled
# cell_type_prop is the celltype enrichment data
load(file = "/home/projects2/scRNA_deconvolution/data/simdata_regression/160s_20000c.rda")
load(file = "data/160s_20000c.rda")
df_out <- df_out_b
cell_type_prop <- cell_type_prop_b
rm(list=ls(pattern="_b$"))
genelist <- rownames(df_out)
samplelist <- colnames(df_out)
cell_type_selection <- c("B","CD4T","CD8T", "DC", "Mono","NK")
truth_matrix <- lapply(cell_type_selection,function(celltype){
tmp_out <- lapply(outputlist,function(sample){
sample[[celltype]]
}) %>%
data.frame()
dimnames(tmp_out) <- list(genelist,paste(celltype,samplelist,sep="_"))
return(tmp_out)
})
truth_matrix <- bind_cols(truth_matrix) %>%
t() %>% data.frame()
samplelist_long <- rownames(truth_matrix)
rm(outputlist)
design_parameters <- cell_type_prop %>%
t() %>% data.frame() %>%
dplyr::select(all_of(cell_type_selection))
design_all <- model.matrix(~.,data=design_parameters)
fit_all <- lmFit(df_out,design_all)
fit_all <- eBayes(fit_all)
coef_all <- data.frame(fit_all$coefficients)
resid_all <- data.frame(residuals.MArrayLM(fit_all,y = df_out)) %>%
t() %>% data.frame()
int_all <- data.frame(coef_all[["X.Intercept."]]) %>%
t() %>% data.frame()
colnames(int_all) <- genelist
decon_matrix <- lapply(cell_type_selection,function(celltype){
print(paste("Running celltype: ",celltype,sep=""))
tmp_coef <- data.frame(coef_all[[celltype]]) %>%
t() %>% data.frame()
colnames(tmp_coef) <- genelist
tmp_out <- lapply(genelist,function(gene){
int_all[[gene]] + tmp_coef[[gene]] + resid_all[[gene]]
}) %>%
data.frame() %>% t() %>% data.frame()
dimnames(tmp_out) <- list(genelist,paste(celltype,samplelist,sep="_"))
return(tmp_out)
})
decon_matrix <- bind_cols(decon_matrix)
rm(list=ls(pattern="_all$"))
decon_matrix_MLR <- decon_matrix %>%
t() %>% data.frame()
cell_type_prop_long <- cell_type_prop %>%
cbind(data.frame(celltype = rownames(.)),.) %>%
pivot_longer(!celltype,
names_to="Sample",
values_to="Prop")
cor_pvals_MLR <- lapply(genelist,function(gene){
suppressWarnings({
cor.test(x = truth_matrix[[gene]]/cell_type_prop_long$Prop,
y = decon_matrix_MLR[[gene]],
method="pearson",
verbose=FALSE)$p.value
})
}) %>%
data.frame() %>% t() %>% data.frame()
rownames(cor_pvals_MLR) <- genelist
colnames(cor_pvals_MLR) <- c("pearson")
cor_pvals_MLR$pearson <- p.adjust(cor_pvals_MLR$pearson,method = "bonferroni")
cor_coef_MLR <- lapply(genelist,function(gene){
suppressWarnings({
cor(x = truth_matrix[[gene]]/cell_type_prop_long$Prop,
y = decon_matrix_MLR[[gene]],
method = "pearson")
})
}) %>%
data.frame() %>% t() %>% data.frame()
rownames(cor_coef_MLR) <- genelist
colnames(cor_coef_MLR) <- c("pearson")
cor_MLR <- data.frame(
coef = cor_coef_MLR$pearson,
pvalue = cor_pvals_MLR$pearson
)
rownames(cor_MLR) <- genelist
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = coef,
y = 1)) +
geom_boxplot() +
geom_point(mapping = aes(x = coef,
y = 1),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
xlab("Pearson correlation coefficient") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.text.x = element_text(size=16),
panel.grid = element_blank())
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = coef,
y = 1)) +
geom_boxplot() +
geom_point(mapping = aes(y = coef,
x = 1),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
xlab("Pearson correlation coefficient") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.text.x = element_text(size=16),
panel.grid = element_blank())
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = 1,
y = coef)) +
geom_boxplot() +
geom_point(mapping = aes(x = 1,
y = coef),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
xlab("Pearson correlation coefficient") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.text.x = element_text(size=16),
panel.grid = element_blank())
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = 1,
y = coef)) +
geom_boxplot() +
geom_point(mapping = aes(x = 1,
y = coef),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
xlab("Pearson correlation coefficient") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.text.x = element_text(size=16),
panel.grid = element_blank())
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = 1,
y = coef)) +
geom_boxplot() +
geom_point(mapping = aes(x = 1,
y = coef),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
xlab("Pearson correlation coefficient") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.text.x = element_text(size=16),
panel.grid = element_blank())
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = 1,
y = coef)) +
geom_boxplot() +
geom_point(mapping = aes(x = 1,
y = coef),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
xlab("Pearson correlation coefficient") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.text.x = element_text(size=16),
panel.grid = element_blank())
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = 1,
y = coef)) +
geom_boxplot() +
geom_point(mapping = aes(x = 1,
y = coef),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
xlab("Pearson correlation coefficient") +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size=16),
axis.text.y = element_text(size=16),
panel.grid = element_blank())
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = 1,
y = coef)) +
geom_boxplot() +
geom_point(mapping = aes(x = 1,
y = coef),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
ylab("Pearson correlation coefficient") +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size=16),
axis.text.y = element_text(size=16),
panel.grid = element_blank())
ggsave(file = "data/simdata_pcc_comp_flipped.png",width=3,height=8)
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = 1,
y = coef)) +
geom_boxplot() +
geom_point(mapping = aes(x = 1,
y = coef),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
ylab("Pearson correlation coefficient") +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size=16),
axis.text.y = element_text(size=16),
panel.grid = element_blank())
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = 1,
y = coef)) +
geom_boxplot() +
geom_point(mapping = aes(x = 1,
y = coef),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
ylab("Pearson correlation coefficient") +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size=16),
axis.text.y = element_text(size=16),
panel.grid = element_blank())
cor_MLR %>%
ggplot(data = .,
mapping = aes(x = 1,
y = coef)) +
geom_boxplot() +
geom_point(mapping = aes(x = 1,
y = coef),
data = filter(cor_MLR,pvalue > 0.05),
color = "Red") +
ylab("Pearson correlation coefficient") +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size=20),
axis.text.y = element_text(size=16),
panel.grid = element_blank())
ggsave(file = "data/simdata_pcc_comp_flipped.png",width=3,height=8)
test <- c("awdpojd","åwokd","apnpasncaspkm","a","aofekwdokd","åwokdwokd")
paste(test)
paste(test,sep=" ")
paste(list(test))
paste(test,collapse="")
paste(test,collapse=" ")
test1 <- "test command"
paste(test,test1,collapse=" ")
paste(test,test1,sep=" ")
paste(test,paste(test1,collapse=" "),sep=" ")
paste(paste(test,collapse=" "),test1,sep=" ")
paste(test1,paste(test,collapse=" "),sep=" ")
cat(genelist)
rm(list=ls())
x <- function(t){
c1 * exp(-b1*t) + a1/b1
}
x(1)
b1 = 0.5
a1 = 1
b1 = 0.5
c1 = 100-a1/b1
a1 <- 1
b1 <- 0.5
a2 <- 2
b2 <- 0.9
c2 <- 100*(1-a2/(b2-b1))+((a2*a1)/b1)*(1/(b2-b1)-1/b2)
c1 <- 100-a1/b1
c2 <- 100*(1-a2/(b2-b1))+((a2*a1)/b1)*(1/(b2-b1)-1/b2)
x <- function(t){
c1 * exp(-b1*t) + a1/b1
}
x(1)
1:100
x(1:100)
x(0:100)
y <- function(t){
(a2*c1*t+c2)*exp(-b1*t)+(a1*a2)/(b1*b1)
}
y(0:100)
(a1*a2)/(b1*b1)
(a2*c1*t+c2)
100*(1-a2/(b2-b1))
((a2*a1)/b1)*(1/(b2-b1)-1/b2)
a2/(b2-b1)
rm(list=ls())
setwd("C:/ku/research_assistant/ob_anonymization/ob_anonymization_P1_cellranger")
setwd("C:/ku/research_assistant/ob_anonymization/ob_anonymization_P1_cellranger")
setwd("C:/ku/research_assistant/ob_anonymization/ob_anonymization_d1")
print("Hello world")
a <- data.frame(t1 = 1:10,t2 = 11:20)
#!/usr/bin/env Rscript
rm(list=ls())
#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)
print("Hello world")
a <- data.frame(t1 = 1:10,t2 = 11:20)
write.csv(x = a)
saveRDS(a,file="test.rds")
rm(list=ls())
readRDS(file = "../ob_anonymization_dataloss/test.rds")
a <- readRDS(file = "../ob_anonymization_dataloss/test.rds")
View(a)
a$
rm(a)
a$
rm(a)
a$
rm(list=ls())
rm(list=ls())
readRDS(file = "../ob_anonymization_dataloss/test.rds")
a <- readRDS(file = "../ob_anonymization_dataloss/test.rds")
View(a)
unique(a$t2)
unique(a$t3)
#!/usr/bin/env Rscript
library("seurat")
#!/usr/bin/env Rscript
library("Seurat")
library("tidyverse")
unique(a$t2)
unique(a$t3)
data_input_dir = "../Data/Tmp_filtered_matrix"
data <- Read10X(data.dir = data_input_dir)
seurat_object = CreateSeuratObject(counts = data$`Gene Expression`)
seurat_object = CreateSeuratObject(counts = data)
rm(data,seurat_object)
gc()
setwd("C:/ku/research_assistant/ob_anonymization/ob_anonymization_M1_cellranger")
setwd("C:/ku/research_assistant/ob_anonymization/ob_anonymization_M1_cellranger")
View(a)
